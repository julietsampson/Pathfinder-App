{"ast":null,"code":"var _jsxFileName = \"/Users/julietsampson/pathfinder/src/Pathfinder/Pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './Pathfinder.css';\nimport { render } from '@testing-library/react';\nimport dijkstra from '../algorithms/dijkstra.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_ROW = 10;\nconst END_ROW = 10;\nconst START_COL = 5;\nconst END_COL = 45;\nexport default class Pathfinder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  animateDijkstra(visited) {\n    for (const node of visited) {\n      const newGrid = this.state.grid.slice();\n      const visitedNode = { ...node,\n        visited: true\n      };\n      newGrid[node.row][node.col] = visitedNode;\n      setTimeout(() => {\n        this.setState({\n          grid: newGrid\n        });\n      });\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const start = grid[START_ROW][START_COL];\n    const end = grid[END_ROW][END_COL];\n    const visited = dijkstra(grid, start, end);\n    this.animateDijkstra(visited);\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIndex) => {\n              const {\n                row,\n                col,\n                isStartNode,\n                isEndNode,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                row: row,\n                isStartNode: isStartNode,\n                isEndNode: isEndNode,\n                isWall: isWall //mouseIsPressed={mouseIsPressed}\n                ,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp()\n              }, nodeIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this);\n            })\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currRow.push(createNode(col, row));\n    }\n\n    grid.push(currRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStartNode: row === START_ROW && col === START_COL,\n    isEndNode: row === END_ROW && col === END_COL,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst createWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const wall = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = wall;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","render","dijkstra","START_ROW","END_ROW","START_COL","END_COL","Pathfinder","constructor","props","state","grid","componentDidMount","getInitialGrid","setState","animateDijkstra","visited","node","newGrid","slice","visitedNode","row","col","setTimeout","visualizeDijkstra","start","end","map","rowIndex","nodeIndex","isStartNode","isEndNode","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","currRow","push","createNode","previousNode","createWall","wall"],"sources":["/Users/julietsampson/pathfinder/src/Pathfinder/Pathfinder.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './Pathfinder.css';\nimport { render } from '@testing-library/react';\nimport dijkstra from '../algorithms/dijkstra.js'\n\nconst START_ROW = 10;\nconst END_ROW = 10;\nconst START_COL = 5;\nconst END_COL = 45;\n\nexport default class Pathfinder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    animateDijkstra(visited) {\n        for (const node of visited) {\n            const newGrid = this.state.grid.slice();\n            const visitedNode = {\n                ...node,\n                visited: true,\n            };\n            newGrid[node.row][node.col] = visitedNode;\n            setTimeout(() => {\n                this.setState({grid: newGrid})\n            });\n        }\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const start = grid[START_ROW][START_COL];\n        const end = grid[END_ROW][END_COL];\n        const visited = dijkstra(grid, start, end);\n        this.animateDijkstra(visited);\n    }\n\n    render() {\n        const {grid} = this.state;\n\n        return (\n            <>\n            <button onClick={() => this.visualizeDijkstra()}>\n                Visualize Dijkstra's Algorithm\n            </button>\n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex}>\n                        {row.map((node, nodeIndex) => {\n                            const{row, col, isStartNode, isEndNode, isWall} = node;\n                            return (\n                                <Node\n                                    key={nodeIndex}\n                                    col={col}\n                                    row={row}\n                                    isStartNode={isStartNode}\n                                    isEndNode={isEndNode}\n                                    isWall={isWall}\n                                    //mouseIsPressed={mouseIsPressed}\n                                    onMouseDown={(row,col) => this.handleMouseDown(row,col)}\n                                    onMouseEnter={(row,col) => this.handleMouseEnter(row, col)}\n                                    onMouseUp={() => this.handleMouseUp()}></Node>\n                            );\n                        })}\n                        </div>\n                    );\n                })}\n            </div>\n            </>\n        );\n    }\n};\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row=0;row<20;row++) {\n        const currRow = [];\n        for (let col = 0;col<50;col++) {\n            currRow.push(createNode(col,row));\n        }\n        grid.push(currRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStartNode: row === START_ROW && col === START_COL,\n        isEndNode: row === END_ROW && col === END_COL,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst createWall = (grid,row,col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const wall = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = wall;\n    return newGrid;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}