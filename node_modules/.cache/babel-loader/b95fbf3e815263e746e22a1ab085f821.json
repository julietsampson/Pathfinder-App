{"ast":null,"code":"var _jsxFileName = \"/Users/julietsampson/pathfinder/src/Pathfinder/Pathfinder.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './Pathfinder.css';\nimport { render } from '@testing-library/react';\nimport dijkstra from '../algorithms/dijkstra.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_ROW = 10;\nconst END_ROW = 10;\nconst START_COL = 15;\nconst END_COL = 35;\nexport default class Pathfinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = createWall(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = createWall(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visited, path) {\n    for (let i = 0; i <= visited.length; i++) {\n      if (i == visited.length) {\n        setTimeout(() => {\n          this.animatePath(path);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visited[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = node.isStartNode ? 'node node-start' : node.isEndNode ? 'node node-end' : node.isWall ? 'node node-wall' : 'node node-visited';\n      }, 15 * i);\n    }\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const start = grid[START_ROW][START_COL];\n    const end = grid[END_ROW][END_COL];\n    const visited = dijkstra(grid, start, end);\n    const path = getPath(end);\n    this.animateDijkstra(visited, path);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIndex) => {\n              const {\n                row,\n                col,\n                isStartNode,\n                isEndNode,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isStartNode: isStartNode,\n                isEndNode: isEndNode,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 33\n              }, this);\n            })\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currRow.push(createNode(col, row));\n    }\n\n    grid.push(currRow);\n  }\n\n  return grid;\n};\n\nconst getPath = end => {\n  return [];\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStartNode: row === START_ROW && col === START_COL,\n    isEndNode: row === END_ROW && col === END_COL,\n    visited: false,\n    isWall: false,\n    previousNode: null,\n    distance: Infinity\n  };\n};\n\nconst createWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const wall = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = wall;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","render","dijkstra","START_ROW","END_ROW","START_COL","END_COL","Pathfinder","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","createWall","handleMouseEnter","handleMouseUp","animateDijkstra","visited","path","i","length","setTimeout","animatePath","node","document","getElementById","className","isStartNode","isEndNode","isWall","visualizeDijkstra","start","end","getPath","map","rowIndex","nodeIndex","currRow","push","createNode","previousNode","distance","Infinity","slice","wall"],"sources":["/Users/julietsampson/pathfinder/src/Pathfinder/Pathfinder.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './Pathfinder.css';\nimport { render } from '@testing-library/react';\nimport dijkstra from '../algorithms/dijkstra.js'\n\nconst START_ROW = 10;\nconst END_ROW = 10;\nconst START_COL = 15;\nconst END_COL = 35;\n\nexport default class Pathfinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = createWall(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = createWall(this.state.grid, row, col);\n        this.setState({grid:newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n \n    animateDijkstra(visited, path) {\n        for (let i = 0; i<=visited.length; i++) {\n            if (i == visited.length) {\n                setTimeout(() => {\n                    this.animatePath(path);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visited[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    node.isStartNode \n                    ? 'node node-start'\n                    : node.isEndNode\n                    ? 'node node-end'\n                    : node.isWall\n                    ? 'node node-wall'\n                    : 'node node-visited';\n            }, 15*i);\n        }\n    }\n\n    animatePath(path) {\n        for (let i=0; i < path.length; i++) {\n            setTimeout(() => {\n                const node = path[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-path';\n            }, 50 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const start = grid[START_ROW][START_COL];\n        const end = grid[END_ROW][END_COL];\n        const visited = dijkstra(grid, start, end);\n        const path = getPath(end);\n        this.animateDijkstra(visited, path);\n    }\n\n    render() {\n        const {grid, mouseIsPressed} = this.state;\n\n        return (\n            <>\n            <button onClick={() => this.visualizeDijkstra()}>\n                Visualize Dijkstra's Algorithm\n            </button>\n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex}>\n                        {row.map((node, nodeIndex) => {\n                            const{row, col, isStartNode, isEndNode, isWall} = node;\n                            return (\n                                <Node\n                                    key={nodeIndex}\n                                    col={col}\n                                    isStartNode={isStartNode}\n                                    isEndNode={isEndNode}\n                                    isWall={isWall}\n                                    mouseIsPressed = {mouseIsPressed}\n                                    onMouseDown={(row,col) => this.handleMouseDown(row, col)}\n                                    onMouseEnter={(row,col) =>\n                                        this.handleMouseEnter(row,col)\n                                    }\n                                    onMouseUp={() => this.handleMouseUp()}\n                                    row={row}></Node>\n                            );\n                        })}\n                        </div>\n                    );\n                })}\n            </div>\n            </>\n        );\n    }\n};\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row=0;row<20;row++) {\n        const currRow = [];\n        for (let col = 0;col<50;col++) {\n            currRow.push(createNode(col,row));\n        }\n        grid.push(currRow);\n    }\n    return grid;\n};\n\nconst getPath = (end) => {\n    return [];\n}\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStartNode: row === START_ROW && col === START_COL,\n        isEndNode: row === END_ROW && col === END_COL,\n        visited: false,\n        isWall: false,\n        previousNode: null,\n        distance: Infinity,\n    };\n};\n\nconst createWall = (grid,row,col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const wall = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = wall;\n    return newGrid;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}